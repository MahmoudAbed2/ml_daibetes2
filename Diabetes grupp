import pandas as pd
from flask import Flask, request, jsonify
from flask_jwt_extended import JWTManager, jwt_required, create_access_token
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler

app = Flask(__name__)
app.config['JWT_SECRET_KEY'] = 'super-secret'  # Ändra detta till en verklig hemlig nyckel
jwt = JWTManager(app)

# Användaruppgifter (endast för demonstrationsändamål, använd riktiga användaruppgifter i en verklig applikation)
USER_CREDENTIALS = {
    'username': 'admin',
    'password': '2002'
}

# Läs in datasetet
data = pd.read_csv('Diabetes classification.csv')

# Förbehandla data
data_encoded = pd.get_dummies(data)  # Koda kategoriska variabler

X = data_encoded.drop('Diagnosis', axis=1)
y = data_encoded['Diagnosis']

# Dela upp data i tränings- och testset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Skapa och träna modellen
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
model = LogisticRegression()
model.fit(X_train_scaled, y_train)

# Funktion för att förutsäga
def predict(data):
    """
    Gör förutsägelser för givet data.
    """
    scaled_data = scaler.transform(data)
    predictions = model.predict(scaled_data)
    return predictions

# Inloggningsruta
@app.route('/login', methods=['POST'])
def login():
    """
    Autentiseringsruta för att generera åtkomsttoken.
    """
    if not request.is_json:
        return jsonify({"msg": "Missing JSON in request"}), 400

    username = request.json.get('username', None)
    password = request.json.get('password', None)

    if not username or not password:
        return jsonify({"msg": "Missing username or password"}), 401

    if username != USER_CREDENTIALS['username'] or password != USER_CREDENTIALS['password']:
        return jsonify({"msg": "Invalid username or password"}), 401

    access_token = create_access_token(identity=username)
    return jsonify(access_token=access_token), 200

@app.route('/predict', methods=['POST'])
@jwt_required()
def predict_route():
    # Ensure request has JSON data
    if not request.is_json:
        return jsonify({"msg": "Missing JSON in request"}), 400
    
    # Get data from request
    data = request.get_json()
    
    if not data:
        return jsonify({"msg": "Missing 'data' in request body"}), 400

    # Convert JSON data to DataFrame
    input_df = pd.DataFrame(data)
    
    # Encode categorical variables
    input_df_encoded = pd.get_dummies(input_df)
    
    # Reorder columns to match training data
    input_df_encoded = input_df_encoded.reindex(columns=X.columns, fill_value=0)
    
    # Make predictions
    predictions = predict(input_df_encoded)

    # Return predictions
    return jsonify({"predictions": predictions.tolist()}), 200


if __name__ == '__main__':
    app.run(debug=True)
